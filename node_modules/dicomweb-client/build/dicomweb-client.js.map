{"version":3,"file":"dicomweb-client.js","sources":["../src/message.js","../src/api.js","../src/utils.js","../src/version.js","../src/dicomweb-client.js"],"sourcesContent":["/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should\n                   be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted\n                   (defaults to length of array)\n * @returns {String}\n */\nfunction uint8ArrayToString(arr, offset = 0, limit) {\n  const itemLimit = limit || arr.length - offset;\n  let str = '';\n  for (let i = offset; i < offset + itemLimit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n  return str;\n}\n\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\nfunction stringToUint8Array(str) {\n  const arr = new Uint8Array(str.length);\n  for (let i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n  return arr;\n}\n\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\nfunction identifyBoundary(header) {\n  const parts = header.split('\\r\\n');\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === '--') {\n      return parts[i];\n    }\n  }\n\n  return null;\n}\n\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {Number} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\nfunction containsToken(message, token, offset = 0) {\n  if (offset + token.length > message.length) {\n    return false;\n  }\n\n  let index = offset;\n  for (let i = 0; i < token.length; i++) {\n    if (token[i] !== message[index]) {\n      return false;\n    }\n\n    index += 1;\n  }\n  return true;\n}\n\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {String} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\nfunction findToken(message, token, offset = 0, maxSearchLength) {\n  let searchLength = message.length;\n  if (maxSearchLength) {\n    searchLength = Math.min(offset + maxSearchLength, message.length);\n  }\n\n  for (let i = offset; i < searchLength; i++) {\n    // If the first value of the message matches\n    // the first value of the token, check if\n    // this is the full token.\n    if (message[i] === token[0]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Create a random GUID\n *\n * @return {string}\n */\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\n/**\n * @typedef {Object} MultipartEncodedData\n * @property {ArrayBuffer} data The encoded Multipart Data\n * @property {String} boundary The boundary used to divide pieces of the encoded data\n */\n\n/**\n * Encode one or more DICOM datasets into a single body so it can be\n * sent using the Multipart Content-Type.\n *\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the\n                          multipart body, passed as ArrayBuffers.\n * @param {String} [boundary] Optional string to define a boundary between each part\n                              of the multipart body. If this is not specified, a random\n                              GUID will be generated.\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This\n                                  contains both the data itself, and the boundary string\n                                  used to divide it.\n */\nfunction multipartEncode(\n  datasets,\n  boundary = guid(),\n  contentType = 'application/dicom',\n) {\n  const contentTypeString = `Content-Type: ${contentType}`;\n  const header = `\\r\\n--${boundary}\\r\\n${contentTypeString}\\r\\n\\r\\n`;\n  const footer = `\\r\\n--${boundary}--`;\n  const headerArray = stringToUint8Array(header);\n  const footerArray = stringToUint8Array(footer);\n  const headerLength = headerArray.length;\n  const footerLength = footerArray.length;\n\n  let length = 0;\n\n  // Calculate the total length for the final array\n  const contentArrays = datasets.map(datasetBuffer => {\n    const contentArray = new Uint8Array(datasetBuffer);\n    const contentLength = contentArray.length;\n\n    length += headerLength + contentLength\n\n    return contentArray;\n  });\n\n  length += footerLength;\n\n  // Allocate the array\n  const multipartArray = new Uint8Array(length);\n\n  // Set the initial header\n  multipartArray.set(headerArray, 0);\n\n  // Write each dataset into the multipart array\n  let position = 0;\n  contentArrays.forEach(contentArray => {\n    multipartArray.set(headerArray, position);\n    multipartArray.set(contentArray, position + headerLength);\n\n    position += headerLength + contentArray.length;\n  });\n\n  multipartArray.set(footerArray, position);\n\n  return {\n    data: multipartArray.buffer,\n    boundary,\n  };\n}\n\n/**\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n *\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n * @returns {Array} The content\n */\nfunction multipartDecode(response) {\n  // Use the raw data if it is provided in an appropriate format\n  const message = ArrayBuffer.isView(response) ? response : new Uint8Array(response);\n\n  /* Set a maximum length to search for the header boundaries, otherwise\n       findToken can run for a long time\n    */\n  const maxSearchLength = 1000;\n\n  // First look for the multipart mime header\n  const separator = stringToUint8Array('\\r\\n\\r\\n');\n  const headerIndex = findToken(message, separator, 0, maxSearchLength);\n  if (headerIndex === -1) {\n    throw new Error('Response message has no multipart mime header');\n  }\n\n  const header = uint8ArrayToString(message, 0, headerIndex);\n  const boundaryString = identifyBoundary(header);\n  if (!boundaryString) {\n    throw new Error('Header of response message does not specify boundary');\n  }\n\n  const boundary = stringToUint8Array(boundaryString);\n  const boundaryLength = boundary.length;\n  const components = [];\n\n  let offset = boundaryLength;\n\n  // Loop until we cannot find any more boundaries\n  let boundaryIndex;\n\n  while (boundaryIndex !== -1) {\n    // Search for the next boundary in the message, starting\n    // from the current offset position\n    boundaryIndex = findToken(message, boundary, offset);\n\n    // If no further boundaries are found, stop here.\n    if (boundaryIndex === -1) {\n      break;\n    }\n\n    const headerTokenIndex = findToken(\n      message,\n      separator,\n      offset,\n      maxSearchLength,\n    );\n    if (headerTokenIndex === -1) {\n      throw new Error('Response message part has no mime header');\n    }\n    offset = headerTokenIndex + separator.length;\n\n    // Extract data from response message, excluding \"\\r\\n\"\n    const spacingLength = 2;\n    const data = response.slice(offset, boundaryIndex - spacingLength);\n\n    // Add the data to the array of results\n    components.push(data);\n\n    // Move the offset to the end of the current section,\n    // plus the identified boundary\n    offset = boundaryIndex + boundaryLength;\n  }\n\n  return components;\n}\n\nexport {\n  containsToken,\n  findToken,\n  identifyBoundary,\n  uint8ArrayToString,\n  stringToUint8Array,\n  multipartEncode,\n  multipartDecode,\n  guid,\n};\n","import { multipartEncode, multipartDecode } from './message.js';\n\n\n\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj !== null;\n}\n\nfunction isEmptyObject(obj) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nfunction areValidRequestHooks(requestHooks) {\n  const isValid =\n    Array.isArray(requestHooks) &&\n    requestHooks.every(\n      requestHook =>\n        typeof requestHook === 'function' && requestHook.length === 2,\n    );\n\n  if (!isValid) {\n    console.warn(\n      'Request hooks should have the following signature: ' +\n        'function requestHook(request, metadata) { return request; }',\n    );\n  }\n\n  return isValid;\n}\n\n/**\n * @typedef {Object} Request\n * @property {XMLHttpRequest} [instance] - If specified, the request to use, otherwise one will be created.\n * @property {function(ProgressEvent):void} [progressCallback] - A callback function to handle progress events.\n * @property {string} [responseType] - The response type of the request.\n * @property {boolean} [withCredentials] - Whether to include credentials in the request.\n */\n\n/**\n * @param {Request} request - Request options.\n */\nconst getRequestOptions = (request = {}) => ({\n    instance: request.instance || new XMLHttpRequest(),\n    progressCallback: request.progressCallback ||  false,\n    withCredentials: request.withCredentials || false,\n    responseType: request.responseType\n})\n\nconst getFirstResult = result => result[0];\n\nconst MEDIATYPES = {\n  DICOM: 'application/dicom',\n  DICOM_JSON: 'application/dicom+json',\n  OCTET_STREAM: 'application/octet-stream',\n  PDF: 'application/pdf',\n  JPEG: 'image/jpeg',\n  PNG: 'image/png',\n};\n\n/**\n * debugLog is a function that can be called with console.log arguments, and will\n * be conditionally displayed, only when debug logging is enabled.\n */\nlet debugLog = () => {};\n\n/**\n * @typedef { import(\"../types/types\").InstanceMetadata } InstanceMetadata\n */\n\n/**\n * A callback with the request instance and metadata information\n * of the currently request being executed that should necessarily\n * return the given request optionally modified.\n * @typedef {function} RequestHook\n * @param {XMLHttpRequest} request - The original XMLHttpRequest instance.\n * @param {object} metadata - The metadata used by the request.\n */\n\n/**\n * Class for interacting with DICOMweb RESTful services.\n */\nclass DICOMwebClient {\n  /**\n   * @constructor\n   * @param {Object} options\n   * @param {String} options.url - URL of the DICOMweb RESTful Service endpoint\n   * @param {String=} options.qidoURLPrefix - URL path prefix for QIDO-RS\n   * @param {String=} options.wadoURLPrefix - URL path prefix for WADO-RS\n   * @param {String=} options.stowURLPrefix - URL path prefix for STOW-RS\n   * @param {String=} options.username - Username\n   * @param {String=} options.password - Password\n   * @param {Object=} options.headers - HTTP headers\n   * @param {Array.<RequestHook>=} options.requestHooks - Request hooks.\n   * @param {Object=} options.verbose - print to console request warnings and errors, default true\n   * @param {Object=} options.debug - print to the console debug level information/status updates.\n   * @param {boolean|String} options.singlepart - retrieve singlepart for the named types.\n   * The available types are:  bulkdata, video, image.  true means all.\n   */\n  constructor(options) {\n    this.baseURL = options.url;\n    if (!this.baseURL) {\n      console.error('no DICOMweb base url provided - calls that require a URL will fail');\n    }\n\n    if ('username' in options) {\n      this.username = options.username;\n      if (!('password' in options)) {\n        console.error(\n          'no password provided to authenticate with DICOMweb service',\n        );\n      }\n      this.password = options.password;\n    }\n\n    if ('qidoURLPrefix' in options) {\n      debugLog(`use URL prefix for QIDO-RS: ${options.qidoURLPrefix}`);\n      this.qidoURL = `${this.baseURL}/${options.qidoURLPrefix}`;\n    } else {\n      this.qidoURL = this.baseURL;\n    }\n\n    if ('wadoURLPrefix' in options) {\n      debugLog(`use URL prefix for WADO-RS: ${options.wadoURLPrefix}`);\n      this.wadoURL = `${this.baseURL}/${options.wadoURLPrefix}`;\n    } else {\n      this.wadoURL = this.baseURL;\n    }\n\n    if ('stowURLPrefix' in options) {\n      debugLog(`use URL prefix for STOW-RS: ${options.stowURLPrefix}`);\n      this.stowURL = `${this.baseURL}/${options.stowURLPrefix}`;\n    } else {\n      this.stowURL = this.baseURL;\n    }\n\n    if (options.singlepart) {\n      debugLog('use singlepart', options.singlepart);\n      this.singlepart = options.singlepart === true ? 'bulkdata,video,image' : options.singlepart;\n    } else {\n      this.singlepart = '';\n    }\n\n    if ('requestHooks' in options) {\n      this.requestHooks = options.requestHooks;\n    }\n\n    // Headers to pass to requests.\n    this.headers = options.headers || {};\n\n    // Optional error interceptor callback to handle any failed request.\n    this.errorInterceptor = options.errorInterceptor || (() => undefined);\n\n    // Verbose - print to console request warnings and errors, default true\n    this.verbose = options.verbose !== false;\n\n    this.setDebug(options.debug);\n \n\n  }\n\n  /**\n   * Allows setting the debug log information. \n   * Note this is different from verbose in that verbose is whether to include warning/error information, defaulting to true\n   * \n   * @param {boolean} debugLevel \n   * @param {function} debugLogFunction to call with the debug output arguments. \n   */\n  setDebug(debugLevel = false, debugLogFunction = null) {\n    this.debugLevel = !!debugLevel;\n    debugLog = debugLogFunction || debugLevel ? console.log : () => {};\n  }\n\n  /**\n   * Gets debug flag\n   * \n   * @returns true if debug logging is enabled\n   */\n  getDebug() {\n    return this.debugLevel;\n  }\n \n  /**\n   * Sets verbose flag.\n   *\n   * @param {Boolean} verbose\n   */\n  setVerbose(verbose) {\n    this.verbose = verbose;\n  }\n\n  /**\n   * Gets verbose flag.\n   *\n   * @return {Boolean} verbose\n   */\n  getVerbose() {\n    return this.verbose;\n  }\n\n  static _parseQueryParameters(params = {}) {\n    let queryString = '?';\n    Object.keys(params).forEach((key, index) => {\n      if (index !== 0) {\n        queryString += '&';\n      }\n      queryString += `${key}=${encodeURIComponent(params[key])}`;\n    });\n    return queryString;\n  }\n\n  /**\n   * Performs an HTTP request.\n   *\n   * @param {String} url\n   * @param {String} method\n   * @param {Object} headers\n   * @param {Request} [request] - Request Options\n   * @param {Array} [request.data] - Data that should be stored\n   *  @return {*}\n   * @private\n   */\n  _httpRequest(url, method, headers = {}, request = {}) {\n    const { errorInterceptor, requestHooks } = this;\n    return new Promise((resolve, reject) => {\n      let requestInstance = request.instance ? request.instance : new XMLHttpRequest();\n\n      requestInstance.open(method, url, true);\n      if ('responseType' in request) {\n        requestInstance.responseType = request.responseType;\n      }\n\n      if (typeof headers === 'object') {\n        Object.keys(headers).forEach(key => {\n          requestInstance.setRequestHeader(key, headers[key]);\n        });\n      }\n\n      // now add custom headers from the user\n      // (e.g. access tokens)\n      const userHeaders = this.headers;\n      Object.keys(userHeaders).forEach(key => {\n        requestInstance.setRequestHeader(key, userHeaders[key]);\n      });\n\n      // Event triggered when upload starts\n      requestInstance.onloadstart = function onloadstart() {\n        debugLog('upload started: ', url)\n      };\n\n      // Event triggered when upload ends\n      requestInstance.onloadend = function onloadend() {\n        debugLog('upload finished')\n      };\n\n      // Handle response message\n      requestInstance.onreadystatechange = () => {\n        if (requestInstance.readyState === 4) {\n          if (requestInstance.status === 200) {\n            const contentType = requestInstance.getResponseHeader('Content-Type');\n            // Automatically distinguishes between multipart and singlepart in an array buffer, and\n            // converts them into a consistent type.\n            if (contentType && contentType.indexOf('multipart') !== -1) {\n              resolve(multipartDecode(requestInstance.response));\n            } else if (requestInstance.responseType === 'arraybuffer') {\n              resolve([requestInstance.response]);\n            } else {\n              resolve(requestInstance.response);\n            }\n          } else if (requestInstance.status === 202) {\n            if (this.verbose) {\n              console.warn('some resources already existed: ', requestInstance);\n            }\n            resolve(requestInstance.response);\n          } else if (requestInstance.status === 204) {\n            if (this.verbose) {\n              console.warn('empty response for request: ', requestInstance);\n            }\n            resolve([]);\n          } else {\n            const error = new Error('request failed');\n            error.request = requestInstance;\n            error.response = requestInstance.response;\n            error.status = requestInstance.status;\n            if (this.verbose) {\n              console.error('request failed: ', requestInstance);\n              console.error(error);\n              console.error(error.response);\n            }\n\n            errorInterceptor(error);\n\n            reject(error);\n          }\n        }\n      };\n\n      // Event triggered while download progresses\n      if ('progressCallback' in request) {\n        if (typeof request.progressCallback === 'function') {\n          requestInstance.onprogress = request.progressCallback;\n        }\n      }\n\n      if (requestHooks && areValidRequestHooks(requestHooks)) {\n        const combinedHeaders = Object.assign({}, headers, this.headers);\n        const metadata = { method, url, headers: combinedHeaders };\n        const pipeRequestHooks = functions => args =>\n          functions.reduce((props, fn) => fn(props, metadata), args);\n        const pipedRequest = pipeRequestHooks(requestHooks);\n        requestInstance = pipedRequest(requestInstance);\n      }\n\n      // Add withCredentials to request if needed\n      if ('withCredentials' in request) {\n        if (request.withCredentials) {\n          requestInstance.withCredentials = true;\n        }\n      }\n\n      if ('data' in request) {\n        requestInstance.send(request.data);\n      } else {\n        requestInstance.send();\n      }\n    });\n  }\n\n  /**\n   * Performs an HTTP GET request.\n   *\n   * @param {String} url\n   * @param {Object} headers\n   * @param {Request} request - Request Options\n   * @return {*}\n   * @private\n   */\n  _httpGet(url, headers, request) {\n    return this._httpRequest(url, 'get', headers, request);\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with application/json\n   * media type.\n   *\n   * @param {String} url\n   * @param {Object} params\n   * @param {Request} request - Request Options\n   * @return {*}\n   * @private\n   */\n  _httpGetApplicationJson(url, params = {}, request = {}) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n    const headers = { Accept: MEDIATYPES.DICOM_JSON };\n\n    request.responseType = 'json';\n\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      request\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with application/pdf\n   * media type.\n   *\n   * @param {String} url\n   * @param {Object} params\n   * @param {Request} request - Request Options\n   * @return {*}\n   * @private\n   */\n  _httpGetApplicationPdf(url, params = {}, request = {}) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n    const headers = { Accept: MEDIATYPES.PDF };\n\n    request.responseType = 'json'\n\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      request,\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with an image\n   media type.\n   *\n   * @param {String} url\n   * @param {Object[]} mediaTypes\n   * @param {Object} params\n   * @param {Request} request - Request Options\n   * @return {*}\n   * @private\n   */\n  _httpGetImage(\n    url,\n    mediaTypes,\n    params = {},\n    request = {}\n  ) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n\n    const supportedMediaTypes = [\n      'image/',\n      'image/*',\n      'image/jpeg',\n      'image/jp2',\n      'image/gif',\n      'image/png',\n    ];\n\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n    const headers = { Accept: acceptHeaderFieldValue };\n    request.responseType = 'arraybuffer'\n\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      request,\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with a text\n   media type.\n   *\n   * @param {String} url\n   * @param {Object[]} mediaTypes\n   * @param {Object} params\n   * @param {Request} request - Request Options\n   * @return {*}\n   * @private\n   */\n  _httpGetText(\n    url,\n    mediaTypes,\n    params = {},\n    request = {}\n  ) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n\n    const supportedMediaTypes = [\n      'text/',\n      'text/*',\n      'text/html',\n      'text/plain',\n      'text/rtf',\n      'text/xml',\n    ];\n\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n    const headers = { Accept: acceptHeaderFieldValue };\n    request.responseType = 'arraybuffer';\n\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      request,\n    );\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a message with a video\n   media type.\n   *\n   * @param {String} url\n   * @param {Object[]} mediaTypes\n   * @param {Object} params\n   * @param {Request} request - Request Options\n   * @return {*}\n   * @private\n   */\n  _httpGetVideo(\n    url,\n    mediaTypes,\n    params = {},\n    request = {}\n  ) {\n    let urlWithQueryParams = url;\n\n    if (typeof params === 'object') {\n      if (!isEmptyObject(params)) {\n        urlWithQueryParams += DICOMwebClient._parseQueryParameters(params);\n      }\n    }\n\n    const supportedMediaTypes = [\n      'video/',\n      'video/*',\n      'video/mpeg',\n      'video/mp4',\n      'video/H265',\n    ];\n\n    const acceptHeaderFieldValue = DICOMwebClient._buildAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n    const headers = { Accept: acceptHeaderFieldValue };\n    request.responseType = 'arraybuffer';\n\n    return this._httpGet(\n      urlWithQueryParams,\n      headers,\n      request,\n    );\n  }\n\n  /**\n   * Asserts that a given media type is valid.\n   *\n   * @params {String} mediaType media type\n   */\n  static _assertMediaTypeIsValid(mediaType) {\n    if (!mediaType) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n\n    const sepIndex = mediaType.indexOf('/');\n    if (sepIndex === -1) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n\n    const mediaTypeType = mediaType.slice(0, sepIndex);\n    const types = ['application', 'image', 'text', 'video'];\n    if (!types.includes(mediaTypeType)) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n\n    if (mediaType.slice(sepIndex + 1).includes('/')) {\n      throw new Error(`Not a valid media type: ${mediaType}`);\n    }\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message with an image media type.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Array} byteRange - Start and end of byte range\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Boolean} rendered - Whether resource should be requested using rendered media types\n   * @param {Request} request - Request Options\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartImage(\n    url,\n    mediaTypes,\n    byteRange,\n    params,\n    rendered = false,\n    request = {}\n  ) {\n    const headers = {};\n    let supportedMediaTypes;\n    if (rendered) {\n      supportedMediaTypes = [\n        'image/jpeg',\n        'image/gif',\n        'image/png',\n        'image/jp2',\n      ];\n    } else {\n      supportedMediaTypes = {\n        '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\n        '1.2.840.10008.1.2.4.50': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.51': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.57': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.70': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.90': ['image/jp2'],\n        '1.2.840.10008.1.2.4.91': ['image/jp2'],\n        '1.2.840.10008.1.2.4.92': ['image/jpx'],\n        '1.2.840.10008.1.2.4.93': ['image/jpx'],\n      };\n\n      if (byteRange) {\n        headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n      }\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n\n    request.responseType = 'arraybuffer';\n\n    return this._httpGet(url, headers, request);\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message with a video media type.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Array} byteRange - Start and end of byte range\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Boolean} rendered - Whether resource should be requested using rendered media types\n   * @param {Request} request - Request Options\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartVideo(\n    url,\n    mediaTypes,\n    byteRange,\n    params,\n    rendered = false,\n    request = {}\n  ) {\n    const headers = {};\n    let supportedMediaTypes;\n    if (rendered) {\n      supportedMediaTypes = [\n        'video/',\n        'video/*',\n        'video/mpeg2',\n        'video/mp4',\n        'video/H265',\n      ];\n    } else {\n      supportedMediaTypes = {\n        '1.2.840.10008.1.2.4.100': ['video/mpeg2'],\n        '1.2.840.10008.1.2.4.101': ['video/mpeg2'],\n        '1.2.840.10008.1.2.4.102': ['video/mp4'],\n        '1.2.840.10008.1.2.4.103': ['video/mp4'],\n        '1.2.840.10008.1.2.4.104': ['video/mp4'],\n        '1.2.840.10008.1.2.4.105': ['video/mp4'],\n        '1.2.840.10008.1.2.4.106': ['video/mp4'],\n      };\n\n      if (byteRange) {\n        headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n      }\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      mediaTypes,\n      supportedMediaTypes,\n    );\n\n    request.responseType = 'arraybuffer';\n\n    return this._httpGet(url, headers, request);\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message\n   * with a application/dicom media type.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Request} request - request options\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartApplicationDicom(\n    url,\n    mediaTypes,\n    params,\n    request = {}\n  ) {\n    const headers = {};\n    const defaultMediaType = 'application/dicom';\n    const supportedMediaTypes = {\n      '1.2.840.10008.1.2.1': [defaultMediaType],\n      '1.2.840.10008.1.2.5': [defaultMediaType],\n      '1.2.840.10008.1.2.4.50': [defaultMediaType],\n      '1.2.840.10008.1.2.4.51': [defaultMediaType],\n      '1.2.840.10008.1.2.4.57': [defaultMediaType],\n      '1.2.840.10008.1.2.4.70': [defaultMediaType],\n      '1.2.840.10008.1.2.4.80': [defaultMediaType],\n      '1.2.840.10008.1.2.4.81': [defaultMediaType],\n      '1.2.840.10008.1.2.4.90': [defaultMediaType],\n      '1.2.840.10008.1.2.4.91': [defaultMediaType],\n      '1.2.840.10008.1.2.4.92': [defaultMediaType],\n      '1.2.840.10008.1.2.4.93': [defaultMediaType],\n      '1.2.840.10008.1.2.4.100': [defaultMediaType],\n      '1.2.840.10008.1.2.4.101': [defaultMediaType],\n      '1.2.840.10008.1.2.4.102': [defaultMediaType],\n      '1.2.840.10008.1.2.4.103': [defaultMediaType],\n      '1.2.840.10008.1.2.4.104': [defaultMediaType],\n      '1.2.840.10008.1.2.4.105': [defaultMediaType],\n      '1.2.840.10008.1.2.4.106': [defaultMediaType],\n    };\n\n    let acceptableMediaTypes = mediaTypes;\n    if (!mediaTypes) {\n      acceptableMediaTypes = [{ mediaType: defaultMediaType }];\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      acceptableMediaTypes,\n      supportedMediaTypes,\n    );\n\n    request.responseType = 'arraybuffer';\n\n    return this._httpGet(url, headers, request);\n  }\n\n  /**\n   * Performs an HTTP GET request that accepts a multipart message\n   * with a application/octet-stream, OR any of the equivalencies for that (eg\n   * application/pdf etc)\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @param {Array} byteRange start and end of byte range\n   * @param {Object} params - Additional HTTP GET query parameters\n   * @param {Request} request - Request Options\n   * @private\n   * @returns {Promise<Array>} Content of HTTP message body parts\n   */\n  _httpGetMultipartApplicationOctetStream(\n    url,\n    mediaTypes,\n    byteRange,\n    params,\n    request = {}\n  ) {\n    const headers = {};\n    const defaultMediaType = 'application/octet-stream';\n    const supportedMediaTypes = {\n      '1.2.840.10008.1.2.1': [...Object.values(MEDIATYPES)],\n    };\n\n    let acceptableMediaTypes = mediaTypes;\n    if (!mediaTypes) {\n      acceptableMediaTypes = [{ mediaType: defaultMediaType }];\n    }\n\n    if (byteRange) {\n      headers.Range = DICOMwebClient._buildRangeHeaderFieldValue(byteRange);\n    }\n\n    headers.Accept = DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n      acceptableMediaTypes,\n      supportedMediaTypes,\n    );\n\n    request.responseType = 'arraybuffer'\n\n    return this._httpGet(url, headers, request);\n  }\n\n  /**\n   * Performs an HTTP POST request.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object} headers - HTTP header fields\n   * @param {Array} data - Data that should be stored\n   * @param {Request} request - Request Options\n   * @private\n   * @returns {Promise} Response\n   */\n  _httpPost(url, headers, data, request) {\n    return this._httpRequest(url, 'post', headers, {\n      ...request, data\n    });\n  }\n\n  /**\n   * Performs an HTTP POST request with content-type application/dicom+json.\n   *\n   * @param {String} url - Unique resource locator\n   * @param {Object} headers - HTTP header fields\n   * @param {Array} data - Data that should be stored\n   * @param {Request} request - Request Options\n   * @private\n   * @returns {Promise} Response\n   */\n  _httpPostApplicationJson(url, data, request) {\n    const headers = { 'Content-Type': MEDIATYPES.DICOM_JSON };\n    return this._httpPost(\n      url,\n      headers,\n      data,\n      request,\n    );\n  }\n\n  /**\n   * Parses media type and extracts its type and subtype.\n   *\n   * @param {String} mediaType - HTTP media type (e.g. image/jpeg)\n   * @private\n   * @returns {String[]} Media type and subtype\n   */\n  static _parseMediaType(mediaType) {\n    DICOMwebClient._assertMediaTypeIsValid(mediaType);\n\n    return mediaType.split('/');\n  }\n\n  /**\n   * Builds an accept header field value for HTTP GET request messages.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types\n   * @param {Object[]} supportedMediaTypes - Supported media types\n   * @return {*}\n   * @private\n   */\n  static _buildAcceptHeaderFieldValue(mediaTypes, supportedMediaTypes) {\n    if (!Array.isArray(mediaTypes)) {\n      throw new Error('Acceptable media types must be provided as an Array');\n    }\n\n    const fieldValueParts = mediaTypes.map(item => {\n      const { mediaType } = item;\n\n      DICOMwebClient._assertMediaTypeIsValid(mediaType);\n      if (!supportedMediaTypes.includes(mediaType)) {\n        throw new Error(\n          `Media type ${mediaType} is not supported for requested resource`,\n        );\n      }\n\n      return mediaType;\n    });\n\n    return fieldValueParts.join(', ');\n  }\n\n  /**\n   * Builds an accept header field value for HTTP GET multipart request\n   * messages.  Will throw an exception if no media types are found which are acceptable,\n   * but will only log a verbose level message when types are specified which are\n   * not acceptable.  This allows requesting several types with having to know\n   * whether they are all acceptable or not.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types\n   * @param {Object[]} supportedMediaTypes - Supported media types\n   * @private\n   */\n  static _buildMultipartAcceptHeaderFieldValue(\n    mediaTypes,\n    supportedMediaTypes,\n  ) {\n    if (!Array.isArray(mediaTypes)) {\n      throw new Error('Acceptable media types must be provided as an Array');\n    }\n\n    if (!Array.isArray(supportedMediaTypes) && !isObject(supportedMediaTypes)) {\n      throw new Error(\n        'Supported media types must be provided as an Array or an Object',\n      );\n    }\n\n    const fieldValueParts = [];\n\n    mediaTypes.forEach(item => {\n      const { transferSyntaxUID, mediaType } = item;\n      DICOMwebClient._assertMediaTypeIsValid(mediaType);\n      let fieldValue = `multipart/related; type=\"${mediaType}\"`;\n\n      if (isObject(supportedMediaTypes)) {\n        // SupportedMediaTypes is a lookup table that maps Transfer Syntax UID\n        // to one or more Media Types\n        if (\n          !Object.values(supportedMediaTypes)\n            .flat(1)\n            .includes(mediaType)\n        ) {\n          if (!mediaType.endsWith('/*') || !mediaType.endsWith('/')) {\n            debugLog(\n              `Media type ${mediaType} is not supported for requested resource`,\n            );\n            return;\n          }\n        }\n\n        if (transferSyntaxUID) {\n          if (transferSyntaxUID !== '*') {\n            if (!Object.keys(supportedMediaTypes).includes(transferSyntaxUID)) {\n              throw new Error(\n                `Transfer syntax ${transferSyntaxUID} is not supported for requested resource`,\n              );\n            }\n\n            const expectedMediaTypes = supportedMediaTypes[transferSyntaxUID];\n\n            if (!expectedMediaTypes.includes(mediaType)) {\n              const actualType = DICOMwebClient._parseMediaType(mediaType)[0];\n              expectedMediaTypes.map(expectedMediaType => {\n                const expectedType = DICOMwebClient._parseMediaType(\n                  expectedMediaType,\n                )[0];\n                const haveSameType = actualType === expectedType;\n\n                if (\n                  haveSameType &&\n                  (mediaType.endsWith('/*') || mediaType.endsWith('/'))\n                ) {\n                  return;\n                }\n\n                throw new Error(\n                  `Transfer syntax ${transferSyntaxUID} is not supported for requested resource`,\n                );\n              });\n            }\n          }\n\n          fieldValue += `; transfer-syntax=${transferSyntaxUID}`;\n        }\n      } else if (\n        Array.isArray(supportedMediaTypes) &&\n        !supportedMediaTypes.includes(mediaType)\n      ) {\n        if( this.verbose ) {\n          console.warn(\n            `Media type ${mediaType} is not supported for requested resource`,\n          );\n        }\n        return;\n      }\n\n      fieldValueParts.push(fieldValue);\n    });\n\n    if( !fieldValueParts.length ) {\n      throw new Error(`No acceptable media types found among ${JSON.stringify(mediaTypes)}`);\n    }\n\n    return fieldValueParts.join(', ');\n  }\n\n  /**\n   * Builds a range header field value for HTTP GET request messages.\n   *\n   * @param {Array} byteRange - Start and end of byte range\n   * @returns {String} Range header field value\n   * @private\n   */\n  static _buildRangeHeaderFieldValue(byteRange = []) {\n    if (byteRange.length === 1) {\n      return `bytes=${byteRange[0]}-`;\n    }\n    if (byteRange.length === 2) {\n      return `bytes=${byteRange[0]}-${byteRange[1]}`;\n    }\n\n    return 'bytes=0-';\n  }\n\n  /**\n   * Gets types that are shared among acceptable media types.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @private\n   * @returns {String[]} Types that are shared among acceptable media types\n   */\n  static _getSharedMediaTypes(mediaTypes) {\n    const types = new Set();\n\n    if (!mediaTypes || !mediaTypes.length) {\n      return types;\n    }\n\n    mediaTypes.forEach(item => {\n      const { mediaType } = item;\n      const type = DICOMwebClient._parseMediaType(mediaType)[0];\n      types.add(`${type}/`);\n    });\n\n    return Array.from(types);\n  }\n\n  /**\n   * Gets common base type of acceptable media types and asserts that only\n   one type is specified. For example, ``(\"image/jpeg\", \"image/jp2\")``\n   will pass, but ``(\"image/jpeg\", \"video/mpeg2\")`` will raise an\n   exception.\n   *\n   * @param {Object[]} mediaTypes - Acceptable media types and optionally the UIDs of the\n   corresponding transfer syntaxes\n   * @private\n   * @returns {String[]} Common media type, eg `image/` for the above example.\n   */\n  static _getCommonMediaType(mediaTypes) {\n    if (!mediaTypes || !mediaTypes.length) {\n      throw new Error('No acceptable media types provided');\n    }\n\n    const sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\n    if (sharedMediaTypes.length === 0) {\n      throw new Error('No common acceptable media type could be identified.');\n    } else if (sharedMediaTypes.length > 1) {\n      throw new Error('Acceptable media types must have the same type.');\n    }\n\n    return sharedMediaTypes[0];\n  }\n\n  /**\n   * Searches for DICOM studies.\n   *\n   * @param {Object} options\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @param {Request} request - Request Options\n   * @return {Object[]} Study representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2)\n   */\n  searchForStudies(options = {}) {\n    debugLog('search for studies');\n    let url = `${this.qidoURL}/studies`;\n    if ('queryParams' in options) {\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    const request = getRequestOptions(options.request)\n    return this._httpGetApplicationJson(url, {}, request);\n  }\n\n  /**\n   * Retrieves metadata for a DICOM study.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {Request} options.request - Request Options\n   * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\n                      belonging to the study\n   */\n  retrieveStudyMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of study metadata',\n      );\n    }\n    debugLog(`retrieve metadata of study ${options.studyInstanceUID}`);\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/metadata`;\n    const request =getRequestOptions(options.request)    \n    return this._httpGetApplicationJson(url, {}, request);\n  }\n\n  /**\n   * Searches for DICOM series.\n   *\n   * @param {Object} options\n   * @param {String} [options.studyInstanceUID] - Study Instance UID\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @param {Request} request - Request Options\n   * @returns {Object[]} Series representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2a)\n   */\n  searchForSeries(options = {}) {\n    let url = this.qidoURL;\n    if ('studyInstanceUID' in options) {\n      debugLog(`search series of study ${options.studyInstanceUID}`);\n      url += `/studies/${options.studyInstanceUID}`;\n    }\n    url += '/series';\n    if ('queryParams' in options) {\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    \n    const request = getRequestOptions(options.request)\n\n    return this._httpGetApplicationJson(url, {}, request);\n  }\n\n  /**\n   * Retrieves metadata for a DICOM series.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {Request} options.request - Request Options\n   * @returns {Promise<InstanceMetadata[]>} Metadata elements in DICOM JSON format for each instance\n                      belonging to the series\n   */\n  retrieveSeriesMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of series metadata',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of series metadata',\n      );\n    }\n\n    debugLog(`retrieve metadata of series ${options.seriesInstanceUID}`);\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/metadata`;\n    \n    const request = getRequestOptions(options.request)\n    return this._httpGetApplicationJson(url, {}, false, withCredentials);\n  }\n\n  /**\n   * Searches for DICOM Instances.\n   *\n   * @param {Object} options\n   * @param {String} [options.studyInstanceUID] - Study Instance UID\n   * @param {String} [options.seriesInstanceUID] - Series Instance UID\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @param {Request} [options.request] - Request Options\n   * @returns {Object[]} Instance representations (http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html#table_6.7.1-2b)\n   */\n  searchForInstances(options = {}) {\n    let url = this.qidoURL;\n    let withCredentials = false;\n    if ('studyInstanceUID' in options) {\n      url += `/studies/${options.studyInstanceUID}`;\n      if ('seriesInstanceUID' in options) {\n        debugLog(\n          `search for instances of series ${options.seriesInstanceUID}`,\n        );\n        url += `/series/${options.seriesInstanceUID}`;\n      } else {\n        debugLog(\n          `search for instances of study ${options.studyInstanceUID}`,\n        );\n      }\n    } else {\n      debugLog('search for instances');\n    }\n    url += '/instances';\n    if ('queryParams' in options) {\n      url += DICOMwebClient._parseQueryParameters(options.queryParams);\n    }\n    const request = getRequestOptions(options.request)\n    return this._httpGetApplicationJson(url, {}, request);\n  }\n\n  /** Returns a WADO-URI URL for an instance\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @returns {String} WADO-URI URL\n   */\n  buildInstanceWadoURIUrl(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required.');\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required.');\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required.');\n    }\n\n    const contentType = options.contentType || MEDIATYPES.DICOM;\n    const transferSyntax = options.transferSyntax || '*';\n    const params = [];\n\n    params.push('requestType=WADO');\n    params.push(`studyUID=${options.studyInstanceUID}`);\n    params.push(`seriesUID=${options.seriesInstanceUID}`);\n    params.push(`objectUID=${options.sopInstanceUID}`);\n    params.push(`contentType=${contentType}`);\n    params.push(`transferSyntax=${transferSyntax}`);\n\n    const paramString = params.join('&');\n\n    return `${this.wadoURL}?${paramString}`;\n  }\n\n  /**\n   * Retrieves metadata for a DICOM Instance.\n   *\n   * @param {Object} options object\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {Request} request - Request Options\n   * @returns {Promise<InstanceMetadata>} metadata elements in DICOM JSON format\n   */\n  retrieveInstanceMetadata(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of instance metadata',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of instance metadata',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of instance metadata',\n      );\n    }\n    debugLog(`retrieve metadata of instance ${options.sopInstanceUID}`);\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/metadata`;\n    \n    const request = getRequestOptions(options.request)\n    return this._httpGetApplicationJson(url, {}, request);\n  }\n\n  /**\n   * Retrieves frames for a DICOM Instance.\n   * @param {Object} options options object\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\n   * @param {Request} options.request - Request Options\n   * @returns {Array} frame items as byte arrays of the pixel data element\n   */\n  retrieveInstanceFrames(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of instance frames',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of instance frames',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of instance frames',\n      );\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error(\n        'frame numbers are required for retrieval of instance frames',\n      );\n    }\n    debugLog(\n      `retrieve frames ${options.frameNumbers.toString()} of instance ${\n        options.sopInstanceUID\n      }`,\n    );\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\n      options.seriesInstanceUID\n    }/instances/${\n      options.sopInstanceUID\n    }/frames/${options.frameNumbers.toString()}`;\n\n    const { mediaTypes } = options;\n    \n    const request = getRequestOptions(options.request)\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationOctetStream(\n        url,\n        false,\n        false,\n        false,\n        request,\n      );\n    }\n\n    const sharedMediaTypes = DICOMwebClient._getSharedMediaTypes(mediaTypes);\n    if (sharedMediaTypes.length > 1) {\n      /**\n       * Enable request of frames that are stored either compressed\n       * (image/* media type) or uncompressed (application/octet-stream\n       * media type).\n       */\n      const supportedMediaTypes = {\n        '1.2.840.10008.1.2.1': ['application/octet-stream'],\n        '1.2.840.10008.1.2.5': ['image/x-dicom-rle'],\n        '1.2.840.10008.1.2.4.50': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.51': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.57': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.70': ['image/jpeg'],\n        '1.2.840.10008.1.2.4.80': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.81': ['image/x-jls', 'image/jls'],\n        '1.2.840.10008.1.2.4.90': ['image/jp2'],\n        '1.2.840.10008.1.2.4.91': ['image/jp2'],\n        '1.2.840.10008.1.2.4.92': ['image/jpx'],\n        '1.2.840.10008.1.2.4.93': ['image/jpx'],\n        '1.2.840.10008.1.2.4.201': ['image/jhc'],\n        '1.2.840.10008.1.2.4.202': ['image/jhc'],\n      };\n\n      const headers = {\n        Accept: DICOMwebClient._buildMultipartAcceptHeaderFieldValue(\n          mediaTypes,\n          supportedMediaTypes,\n        ),\n      };\n      request.responseType = 'arraybuffer';\n      return this._httpGet(url, headers, request);\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n\n    if (commonMediaType.startsWith('application')) {\n      return this._httpGetMultipartApplicationOctetStream(\n        url,\n        mediaTypes,\n        false,\n        false,\n        request,\n      );\n    }\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetMultipartImage(\n        url,\n        mediaTypes,\n        false,\n        false,\n        false,\n        request,\n      );\n    }\n    if (commonMediaType.startsWith('video')) {\n      return this._httpGetMultipartVideo(\n        url,\n        mediaTypes,\n        false,\n        false,\n        false,\n        request,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of frames.`,\n    );\n  }\n\n /**\n * Element in mediaTypes parameter\n * @typedef {Object} MediaType\n * @param {String} [MediaType.mediaType] - ie 'image/jpeg', 'image/png'...\n */\n\n  /**\n   * Retrieves an individual, server-side rendered DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @param {Request} [options.request] - Request Options - Request Options\n   * @returns {Promise<ArrayBuffer>} Rendered DICOM Instance\n   */\n  retrieveInstanceRendered(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance',\n      );\n    }\n\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/rendered`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n    const request = getRequestOptions(options.request)\n\n    if (!mediaTypes) {\n      request.responseType = 'arraybuffer';\n      if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(\n        url,\n        headers,\n        request,\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        request,\n      );\n    }\n    if (commonMediaType.startsWith('video')) {\n      return this._httpGetVideo(\n        url,\n        mediaTypes,\n        queryParams,\n        request\n      );\n    }\n    if (commonMediaType.startsWith('text')) {\n      return this._httpGetText(\n        url,\n        mediaTypes,\n        queryParams,\n        request,\n      );\n    }\n    if (commonMediaType === MEDIATYPES.PDF) {\n      return this._httpGetApplicationPdf(\n        url,\n        queryParams,\n        request,\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered instance.',\n    );\n  }\n\n  /**\n   * Retrieves a thumbnail of an DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @param {Request} [options.request] - Request Options - Request Options\n   * @returns {ArrayBuffer} Thumbnail\n   */\n  retrieveInstanceThumbnail(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance',\n      );\n    }\n\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}/thumbnail`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n   \n    const request = getRequestOptions(options.request)\n\n    if (!mediaTypes) {\n      request.responseType = 'arraybuffer';\n      if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(\n        url,\n        headers,\n        request\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        request\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered instance.',\n    );\n  }\n\n  /**\n   * Retrieves rendered frames for a DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\n   * @param {MediaType[]} [options.mediaTypes] - Acceptable HTTP media types\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @param {Request} [options.request] - Request Options - Request Options\n   * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n   */\n  retrieveInstanceFramesRendered(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error(\n        'frame numbers are required for retrieval of rendered instance frames',\n      );\n    }\n\n    debugLog(\n      `retrieve rendered frames ${options.frameNumbers.toString()} of instance ${\n        options.sopInstanceUID\n      }`,\n    );\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\n      options.seriesInstanceUID\n    }/instances/${\n      options.sopInstanceUID\n    }/frames/${options.frameNumbers.toString()}/rendered`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n    const request = getRequestOptions(options.request)\n\n    if (!mediaTypes) {\n      if (queryParams) {\n        request.responseType = 'arraybuffer';\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(url, headers, request);\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        request\n      );\n    }\n    if (commonMediaType.startsWith('video')) {\n      return this._httpGetVideo(\n        url,\n        mediaTypes,\n        queryParams,\n        request\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered frame.',\n    );\n  }\n\n  /**\n   * Retrieves thumbnail of frames for a DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {String} options.frameNumbers - One-based indices of Frame Items\n   * @param {Object} [options.queryParams] - HTTP query parameters\n   * @param {Request} [options.request] - Request Options - Request Options\n   * @returns {ArrayBuffer[]} Rendered Frame Items as byte arrays\n   */\n  retrieveInstanceFramesThumbnail(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error(\n        'Study Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error(\n        'Series Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error(\n        'SOP Instance UID is required for retrieval of rendered instance frames',\n      );\n    }\n    if (!('frameNumbers' in options)) {\n      throw new Error(\n        'frame numbers are required for retrieval of rendered instance frames',\n      );\n    }\n\n    console.debug(\n      `retrieve rendered frames ${options.frameNumbers.toString()} of instance ${\n        options.sopInstanceUID\n      }`,\n    );\n    let url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${\n      options.seriesInstanceUID\n    }/instances/${\n      options.sopInstanceUID\n    }/frames/${options.frameNumbers.toString()}/thumbnail`;\n\n    const { mediaTypes, queryParams } = options;\n    const headers = {};\n    const request = getRequestOptions(options.request);\n\n    if (!mediaTypes) {\n      request.responseType = 'arraybuffer';\n      if (queryParams) {\n        url += DICOMwebClient._parseQueryParameters(queryParams);\n      }\n      return this._httpGet(\n        url,\n        headers,\n        request\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType.startsWith('image')) {\n      return this._httpGetImage(\n        url,\n        mediaTypes,\n        queryParams,\n        request\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported ` +\n        'for retrieval of rendered frame.',\n    );\n  }\n\n  /**\n   * Retrieves a DICOM Instance.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {String} options.sopInstanceUID - SOP Instance UID\n   * @param {string[]} options.mediaTypes\n   * @param {Request} options.request - Request Options\n   * @returns {Promise<ArrayBuffer>} DICOM Part 10 file as Arraybuffer\n   */\n  retrieveInstance(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required');\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required');\n    }\n    if (!('sopInstanceUID' in options)) {\n      throw new Error('SOP Instance UID is required');\n    }\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}/instances/${options.sopInstanceUID}`;\n\n    const { mediaTypes } = options;\n\n    const request = getRequestOptions(options.request)\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        false,\n        false,\n        request\n      ).then(getFirstResult);\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType === MEDIATYPES.DICOM) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        mediaTypes,\n        false,\n        request\n      ).then(getFirstResult);\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of instance.`,\n    );\n  }\n\n  /**\n   * Retrieves all DICOM Instances of a Series.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {String} options.seriesInstanceUID - Series Instance UID\n   * @param {Request} options.request - Request Options\n   * @returns {Promise<ArrayBuffer[]>} DICOM Instances\n   */\n  retrieveSeries(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required');\n    }\n    if (!('seriesInstanceUID' in options)) {\n      throw new Error('Series Instance UID is required');\n    }\n\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}/series/${options.seriesInstanceUID}`;\n\n    const { mediaTypes } = options;\n    const request = getRequestOptions(options.request)\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        false,\n        false,\n        request\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType === MEDIATYPES.DICOM) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        mediaTypes,\n        false,\n        request\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of series.`,\n    );\n  }\n\n  /**\n   * Retrieves all DICOM Instances of a Study.\n   *\n   * @param {Object} options\n   * @param {String} options.studyInstanceUID - Study Instance UID\n   * @param {Request} options.request - Request Options\n   * @returns {ArrayBuffer[]} DICOM Instances\n   */\n  retrieveStudy(options) {\n    if (!('studyInstanceUID' in options)) {\n      throw new Error('Study Instance UID is required');\n    }\n\n    const url = `${this.wadoURL}/studies/${options.studyInstanceUID}`;\n\n    const { mediaTypes } = options;\n    const request = getRequestOptions(options.request);\n\n    if (!mediaTypes) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        false,\n        false,\n        request\n      );\n    }\n\n    const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n    if (commonMediaType === MEDIATYPES.DICOM) {\n      return this._httpGetMultipartApplicationDicom(\n        url,\n        mediaTypes,\n        false,\n        request\n      );\n    }\n\n    throw new Error(\n      `Media type ${commonMediaType} is not supported for retrieval of study.`,\n    );\n  }\n\n  /**\n   * Retrieves and parses BulkData from a BulkDataURI location.\n   * Decodes the multipart encoded data and returns the resulting data\n   * as an ArrayBuffer.\n   *\n   * See http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.5.html\n   *\n   * @param {Object} options\n   * @param {string} options.BulkDataURI to retrieve\n   * @param {Array}  options.mediaTypes to use to fetch the URI\n   * @param {string} options.byteRange to request a sub-range (only valid on single part)\n   * @param {Request} options.request - Request Options\n   * @returns {Promise<Array>} Bulkdata parts\n   */\n  retrieveBulkData(options) {\n    if (!('BulkDataURI' in options)) {\n      throw new Error('BulkDataURI is required.');\n    }\n\n    const url = options.BulkDataURI;\n    const { mediaTypes, byteRange } = options;\n    const request = getRequestOptions(options.request);\n\n    if (this.singlepart.indexOf('bulkdata') !== -1) {\n      request.responseType = 'arraybuffer';\n      return this._httpGet(url, options.headers, request);\n    }\n\n    if (mediaTypes) {\n      try {\n        const commonMediaType = DICOMwebClient._getCommonMediaType(mediaTypes);\n\n        if (commonMediaType==='image/') {\n          return this._httpGetMultipartImage(\n            url,\n            mediaTypes,\n            byteRange,\n            false,\n            false,\n            progressCallback,\n            withCredentials,\n          );\n        }\n      } catch(e) {\n        // No-op - this happens sometimes if trying to fetch the specific desired type but want to fallback to octet-stream\n      }\n    }\n\n    // Just use the media types provided\n    return this._httpGetMultipartApplicationOctetStream(\n      url,\n      mediaTypes,\n      byteRange,\n      false,\n      request\n    );\n  }\n\n  /**\n   * Stores DICOM Instances.\n   *\n   * @param {Object} options\n   * @param {ArrayBuffer[]} options.datasets - DICOM Instances in PS3.10 format\n   * @param {String} [options.studyInstanceUID] - Study Instance UID\n   * @param {Request} [options.request] - Request Options\n   * @returns {Promise} Response message\n   */\n  storeInstances(options) {\n    if (!('datasets' in options)) {\n      throw new Error('datasets are required for storing');\n    }\n\n    let url = `${this.stowURL}/studies`;\n    if ('studyInstanceUID' in options) {\n      url += `/${options.studyInstanceUID}`;\n    }\n\n    const { data, boundary } = multipartEncode(options.datasets);\n    const headers = {\n      'Content-Type': `multipart/related; type=\"application/dicom\"; boundary=\"${boundary}\"`,\n    };    \n\n    const request = getRequestOptions(options.request);\n    return this._httpPost(\n      url,\n      headers,\n      data,\n      request\n    );\n  }\n}\n\n\nexport { DICOMwebClient };\nexport default DICOMwebClient;\n","function findSubstring(str, before, after) {\n  const beforeIndex = str.lastIndexOf(before) + before.length;\n  if (beforeIndex < before.length) {\n    return null;\n  }\n  if (after !== undefined) {\n    const afterIndex = str.lastIndexOf(after);\n    if (afterIndex < 0) {\n      return null;\n    }\n    return str.substring(beforeIndex, afterIndex);\n  }\n  return str.substring(beforeIndex);\n}\n\nfunction getStudyInstanceUIDFromUri(uri) {\n  let uid = findSubstring(uri, 'studies/', '/series');\n  if (!uid) {\n    uid = findSubstring(uri, 'studies/');\n  }\n  if (!uid) {\n    console.debug(\n      `Study Instance UID could not be dertermined from URI \"${uri}\"`,\n    );\n  }\n  return uid;\n}\n\nfunction getSeriesInstanceUIDFromUri(uri) {\n  let uid = findSubstring(uri, 'series/', '/instances');\n  if (!uid) {\n    uid = findSubstring(uri, 'series/');\n  }\n  if (!uid) {\n    console.debug(\n      `Series Instance UID could not be dertermined from URI \"${uri}\"`,\n    );\n  }\n  return uid;\n}\n\nfunction getSOPInstanceUIDFromUri(uri) {\n  let uid = findSubstring(uri, '/instances/', '/frames');\n  if (!uid) {\n    uid = findSubstring(uri, '/instances/', '/metadata');\n  }\n  if (!uid) {\n    uid = findSubstring(uri, '/instances/');\n  }\n  if (!uid) {\n    console.debug(`SOP Instance UID could not be dertermined from URI\"${uri}\"`);\n  }\n  return uid;\n}\n\n\nfunction getFrameNumbersFromUri(uri) {\n  let numbers = findSubstring(uri, '/frames/', '/rendered');\n  if (!numbers) {\n    numbers = findSubstring(uri, '/frames/');\n  }\n  if (numbers === undefined) {\n    console.debug(`Frame Numbers could not be dertermined from URI\"${uri}\"`);\n  }\n  return numbers.split(',');\n}\n\nexport {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri,\n};\n","export default '0.5.2';\n","import { DICOMwebClient } from './api.js';\nimport {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri,\n} from './utils.js';\n\nconst api = {\n  DICOMwebClient,\n};\nconst utils = {\n  getStudyInstanceUIDFromUri,\n  getSeriesInstanceUIDFromUri,\n  getSOPInstanceUIDFromUri,\n  getFrameNumbersFromUri,\n};\n\nexport { default as version } from './version.js';\n\nexport { api, utils };\n"],"names":["uint8ArrayToString","arr","offset","arguments","length","undefined","limit","itemLimit","str","i","String","fromCharCode","stringToUint8Array","Uint8Array","j","charCodeAt","identifyBoundary","header","parts","split","substr","containsToken","message","token","index","findToken","maxSearchLength","searchLength","Math","min","guid","s4","floor","random","toString","substring","concat","multipartEncode","datasets","boundary","contentType","contentTypeString","footer","headerArray","footerArray","headerLength","footerLength","contentArrays","map","datasetBuffer","contentArray","contentLength","multipartArray","set","position","forEach","data","buffer","multipartDecode","response","ArrayBuffer","isView","separator","headerIndex","Error","boundaryString","boundaryLength","components","boundaryIndex","headerTokenIndex","spacingLength","slice","push","isObject","obj","_typeof","isEmptyObject","Object","keys","constructor","areValidRequestHooks","requestHooks","isValid","Array","isArray","every","requestHook","console","warn","getRequestOptions","request","instance","XMLHttpRequest","progressCallback","withCredentials","responseType","getFirstResult","result","MEDIATYPES","DICOM","DICOM_JSON","OCTET_STREAM","PDF","JPEG","PNG","debugLog","DICOMwebClient","options","_classCallCheck","baseURL","url","error","username","password","qidoURLPrefix","qidoURL","wadoURLPrefix","wadoURL","stowURLPrefix","stowURL","singlepart","headers","errorInterceptor","verbose","setDebug","debug","_createClass","key","value","debugLevel","debugLogFunction","log","getDebug","setVerbose","getVerbose","_httpRequest","method","_this","Promise","resolve","reject","requestInstance","open","setRequestHeader","userHeaders","onloadstart","onloadend","onreadystatechange","readyState","status","getResponseHeader","indexOf","onprogress","combinedHeaders","assign","metadata","pipeRequestHooks","functions","args","reduce","props","fn","pipedRequest","send","_httpGet","_httpGetApplicationJson","params","urlWithQueryParams","_parseQueryParameters","Accept","_httpGetApplicationPdf","_httpGetImage","mediaTypes","supportedMediaTypes","acceptHeaderFieldValue","_buildAcceptHeaderFieldValue","_httpGetText","_httpGetVideo","_httpGetMultipartImage","byteRange","rendered","Range","_buildRangeHeaderFieldValue","_buildMultipartAcceptHeaderFieldValue","_httpGetMultipartVideo","_httpGetMultipartApplicationDicom","defaultMediaType","acceptableMediaTypes","mediaType","_httpGetMultipartApplicationOctetStream","_toConsumableArray","values","_httpPost","_objectSpread","_httpPostApplicationJson","searchForStudies","queryParams","retrieveStudyMetadata","studyInstanceUID","searchForSeries","retrieveSeriesMetadata","seriesInstanceUID","searchForInstances","buildInstanceWadoURIUrl","transferSyntax","sopInstanceUID","paramString","join","retrieveInstanceMetadata","retrieveInstanceFrames","frameNumbers","sharedMediaTypes","_getSharedMediaTypes","commonMediaType","_getCommonMediaType","startsWith","retrieveInstanceRendered","retrieveInstanceThumbnail","retrieveInstanceFramesRendered","retrieveInstanceFramesThumbnail","retrieveInstance","then","retrieveSeries","retrieveStudy","retrieveBulkData","BulkDataURI","e","storeInstances","_multipartEncode","queryString","encodeURIComponent","_assertMediaTypeIsValid","sepIndex","mediaTypeType","types","includes","_parseMediaType","fieldValueParts","item","_this2","transferSyntaxUID","fieldValue","flat","endsWith","expectedMediaTypes","actualType","expectedMediaType","expectedType","haveSameType","JSON","stringify","Set","type","add","from","findSubstring","before","after","beforeIndex","lastIndexOf","afterIndex","getStudyInstanceUIDFromUri","uri","uid","getSeriesInstanceUIDFromUri","getSOPInstanceUIDFromUri","getFrameNumbersFromUri","numbers","api","utils"],"mappings":"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"}